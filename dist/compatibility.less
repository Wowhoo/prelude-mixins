// Animations
// ==========
// Generates `animation` for a given element
//
// Link: caniuse http://caniuse.com/css-animation
// Link: spec http://www.w3.org/TR/css3-animations
//
// Examples:
// .animation(my-animation 6s backwards 2s);
// .animation(~"my-animation 6s backwards 2s, my-second-animation 3s linear alternate infinite");
// .animation-delay(2s);
// .animation-delay(~"200ms, 2s");
// .animation-direction(alternate);
// .animation-direction(~"normal, alternate");
// .animation-duration(~"3s, 2s");
// .animation-fill-mode(forwards);
// .animation-timing-function(ease-in-out);
// .animation-iteration-count(3);
// .animation-name(myanimation);
// .animation-play-state(paused);
// -----------------------------------------------


// Animation
// ---------
// Shorthand to define a CSS animation, setting all parameters at once.
//
// Values: none | <animation-name> <animation-duration> <animation-timing-function> <animation-delay> <animation-iteration-count> <animation-direction> <animation-fill-mode> <animation-play-state>
.animation(@animation) {
    -webkit-animation: @animation;
        -ms-animation: @animation;
            animation: @animation;
}

// Animation name
// --------------
// The animation-name CSS property specifies a list of animations that should be applied to the selected element. Each name indicates a @keyframes at-rule that defines the property values for the animation sequence.
//
// Values: <string>
.animation-name(@name) {
    -webkit-animation-name: @name;
    -ms-animation-name: @name;
    animation-name: @name;
}

// Animation duration
// ------------------
// The animation-duration CSS property specifies the length of time that an animation should take to complete one cycle.
//
// Values: <number>
.animation-duration(@duration: 0) {
    -webkit-animation-duration: @duration;
    -ms-animation-duration: @duration;
    animation-duration: @duration;
}


// Animation timing function
// -------------------------
// The animation-timing-function CSS property determines whether an animation is running or paused. You can query this property's value to determine whether or not the animation is currently running; in addition, you can set its value to pause and resume playback of an animation.
//
// Values: linear | ease | ease-in | ease-out | ease-in-out | <cubic-bezier(n,n,n,n)>
.animation-timing-function(@function: ease) {
    -webkit-animation-timing-function: @function;
    -ms-animation-timing-function: @function;
    animation-timing-function: @function;
}


// Animation delay
// ---------------
// Defines a length of time to elapse before an animation starts, allowing an animation to begin execution some time after it is applied.
//
// Values: <number>
.animation-delay(@delay: 0) {
    -webkit-animation-delay: @delay;
    -ms-animation-delay: @delay;
    animation-delay: @delay;
}


// Animation iteration count
// -------------------------
// The animation-iteration-count CSS property specifies how a CSS animation should apply styles to its target before and after it is executing.
//
// Values: <number> | infinite
.animation-iteration-count(@count: 1) {
    -webkit-animation-iteration-count: @count;
    -ms-animation-iteration-count: @count;
    animation-iteration-count: @count;
}


// Animation direction
// -------------------
// The animation-direction CSS property indicates whether the animation should play in reverse on alternate cycles.
//
// Values: normal | reverse | alternate | alternate-reverse
.animation-direction(@direction: normal) {
    -webkit-animation-direction: @direction;
    -ms-animation-direction: @direction;
    animation-direction: @direction;
}


// Animation fill mode
// -------------------
// The animation-fill-mode CSS property specifies how a CSS animation should apply styles to its target before and after it is executing.
//
// Values: none | forwards | backwards | both
.animation-fill-mode(@mode) {
    -webkit-animation-fill-mode: @mode;
    -ms-animation-fill-mode: @mode;
    animation-fill-mode: @mode;
}


// Animation play state
// --------------------
// The animation-play-state CSS property determines whether an animation is running or paused. You can query this property's value to determine whether or not the animation is currently running; in addition, you can set its value to pause and resume playback of an animation.
//
// Values: running | paused
.animation-play-state(@state: running) {
    -webkit-animation-play-state: @state;
    -ms-animation-play-state: @state;
    animation-play-state: @state;
}
// Appearance
// ==========
// Generates `appearance` for a given element
//
// Link: MDN https://developer.mozilla.org/en-US/docs/Web/CSS/-moz-appearance
// Link: css-tricks http://css-tricks.com/almanac/properties/a/appearance/
// Link: spec http://www.w3.org/TR/2004/CR-css3-ui-20040511/#appearance
//
// Examples: 
// .appearance(button);
// -----------------------------------------------


// Appearance
// ----------
// Allows changing the style of any element to platform-based interface elements or vice versa.
//
// Values: normal | icon | window | button | menu | field
.appearance (@value) {
	-webkit-appearance: @value;
	   -moz-appearance: @value;
	        appearance: @value;
}
// Backgrounds
// ===========
// Generates `background` for a given element
//
// Link: mdn https://developer.mozilla.org/en-US/docs/Web/CSS/background-clip
// Link: mdn https://developer.mozilla.org/en-US/docs/Web/CSS/background-origin
// Link: mdn https://developer.mozilla.org/en-US/docs/Web/CSS/background-size
// Link: spec http://www.w3.org/TR/css3-background/#the-background-clip
// Link: spec http://www.w3.org/TR/css3-background/#the-background-origin
// Link: spec http://www.w3.org/TR/css3-background/#the-background-size
// 
// Examples: 
// .background-clip(padding-box);
// .background-origin(border-box);
// .background-size(50%);
// .background-size(cover);
// .background-size(auto 25%); /* the first value defines the width of the image, the second its height */
// .background-size(~"6px, auto, contain"); /* Values for the multiple backgrounds */
// -----------------------------------------------


// Background clipping
// -------------------
// Specifies how an elementâ€™s background is clipped.
// Heads up: FF 3.6 and under need "padding" instead of "padding-box"
//
// Values: border-box | padding-box | content-box
.background-clip(@clip: border-box) {
  -webkit-background-clip: @clip;
     -moz-background-clip: @clip;
          background-clip: @clip;
}


// Background origin
// -----------------
// Specifies what the background-position property is relative to.
//
// Values: padding-box | border-box | content-box;
.background-origin(@origin: padding-box) {
  -webkit-background-origin: @origin;
     -moz-background-origin: @origin;
          background-origin: @origin;
}


// Background sizing
// -----------------
// Specifies the size of the background images.
//
// Values: <length> | percentage | cover | contain
.background-size(@size) {
  -webkit-background-size: @size;
     -moz-background-size: @size;
          background-size: @size;
}
// Border Image
// ============
// Generates `border-image` for a given element
//
// Link: caniuse http://caniuse.com/border-image
// Link: mdn https://developer.mozilla.org/en-US/docs/Web/CSS/border-image
// Link: spec http://www.w3.org/TR/css3-background/#border-images
// 
// Examples: 
// .border-image(url(border.png) 61 45 62 54 repeat);
// -----------------------------------------------


// Border image
// ------------
// Values: none | <source> <slice> <width> <outset> <repeat>;
.border-image(@args) {
  -webkit-border-image: @image;
      -ms-border-image: @image;
          border-image: @image;
}
// Border Radius
// ==========
// Generates cross-browser-compatible `border-radius` for a given element
// it adds background-clip: padding-box, because it fixes problem with older Safari. (http://tumble.sneak.co.nz/post/928998513/fixing-the-background-bleed)
//
// Link: caniuse http://caniuse.com/border-radius
// Link: spec http://www.w3.org/TR/css3-background/#the-border-radius
// Link: mdn https://developer.mozilla.org/en-US/docs/Web/CSS/border-radius
// 
// Examples: 
// .border-radius(20px 10px);
// .border-radius(20px 10px, false);
// .border-top-left-radius(0.5em);
// .border-top-left-radius(0.5em, false);
// .border-top-right-radius(0.5em);
// .border-top-right-radius(0.5em, false);
// .border-bottom-right-radius(0.5em);
// .border-bottom-right-radius(0.5em, false);
// .border-bottom-left-radius(0.5em);
// .border-bottom-left-radius(0.5em, false);
// .border-top-radius(0.5em);
// .border-top-radius(0.5em, false);
// .border-right-radius(0.5em);
// .border-right-radius(0.5em, false);
// .border-bottom-radius(0.5em);
// .border-bottom-radius(0.5em, false);
// .border-left-radius(0.5em);
// .border-left-radius(0.5em, false);
// -----------------------------------------------


// Border Radius
// --------------
// Values: [ <length> | <percentage> ]{1,4}
.border-radius(@radius, @with_clip: true) {
  -webkit-border-radius: @radius;
          border-radius: @radius;

   .inception(@boolean) when (@boolean = true) {
       .background-clip(padding-box);
   }
   .inception(@with_clip);
}


// Border top left radius
// -------------------------
// Values: <length> | <percentage>
.border-top-left-radius(@radius, @with_clip: true) {
  -webkit-border-top-left-radius: @radius;
          border-top-left-radius: @radius;

  .inception(@boolean) when (@boolean = true) {
       .background-clip(padding-box);
   }
   .inception(@with_clip);
}


// Border top right radius
// -------------------------
// Values: <length> | <percentage>
.border-top-right-radius(@radius, @with_clip: true) {
  -webkit-border-top-right-radius: @radius;
          border-top-right-radius: @radius;

   .inception(@boolean) when (@boolean = true) {
       .background-clip(padding-box);
   }
   .inception(@with_clip);
}


// Border bottom right radius
// --------------------------
// Values: <length> | <percentage>
.border-bottom-right-radius(@radius, @with_clip: true) {
  -webkit-border-bottom-right-radius: @radius;
          border-bottom-right-radius: @radius;

   .inception(@boolean) when (@boolean = true) {
       .background-clip(padding-box);
   }
   .inception(@with_clip);
}


// Border bottom left radius
// -------------------------
// Values: <length> | <percentage>
.border-bottom-left-radius(@radius, @with_clip: true) {
  -webkit-border-bottom-left-radius: @radius;
          border-bottom-left-radius: @radius;

  .inception(@boolean) when (@boolean = true) {
       .background-clip(padding-box);
   }
   .inception(@with_clip);
}


// Single Side Border Radius
// -------------------------
// Values: <length> | <percentage>
.border-top-radius(@radius, @with_clip: true) {
  .border-top-right-radius(@radius, @with_clip);
  .border-top-left-radius(@radius, @with_clip);
}
.border-right-radius(@radius, @with_clip: true) {
  .border-top-right-radius(@radius, @with_clip);
  .border-bottom-right-radius(@radius, @with_clip);
}
.border-bottom-radius(@radius, @with_clip: true) {
  .border-bottom-right-radius(@radius, @with_clip);
  .border-bottom-left-radius(@radius, @with_clip);
}
.border-left-radius(@radius, @with_clip: true) {
  .border-top-left-radius(@radius, @with_clip);
  .border-bottom-left-radius(@radius, @with_clip);
}
// Calc
// ==========
// Generates cross-browser-compatible `calc` for a given element
//
// Link: caniuse http://caniuse.com/calc
// Link: mdn https://developer.mozilla.org/en-US/docs/Web/CSS/calc
// 
// Examples: 
// .calc(width, ~'100% - 33px');
// -----------------------------------------------


// Calc
// ----------
// Values-first: width | height | padding | margin
// values-second: px | em | rem | %

.calc(@property, @value) { 
    .inseption(@property, @value) {
    @output: ~'0; @{property}: calc(@{value}); @{property}:-webkit-calc(@{value}); @{property}:-moz-calc(@{value})';
    	-pl-property: @output;
    }
	
	.inseption(@property, @value);
}
// Multiple Columns
// ================
// Link: caniuse http://caniuse.com/multicolumn
// Link: mdn https://developer.mozilla.org/en-US/docs/Web/CSS/columns
//
// Examples: 
// .columns(100px 3);
// .column-width(100px);
// .column-count(3);
// .column-gap(100px);
// .column-rule(1px solid red);
// .content-columns(2 100px);
// -----------------------------------------------


// Columns
// -------
// The columns CSS property is a shorthand property allowing to set both the column-width and the column-count properties at the same time.
//
// Values: <column-width> <column-count>
.columns(@columns){
    -webkit-columns: @columns;
    -moz-columns: @columns;
    columns: @columns;
}


// Column width
// ------------
// Values: <length> | auto
.column-width(@width){
    -webkit-column-width: @width;
    -moz-column-width: @width;
    column-width: @width;
}


// Column count
// ------------
// The column-count CSS property describes the number of columns of the element.
//
// Values: <number> | auto
.column-count(@count) {
    -webkit-column-count: @count;
    -moz-column-count: @count;
    column-count: @count;
}


// Column gap
// ----------
// The column-gap CSS property sets the size of the gap between columns for elements which are specified to display as a multi-column element.
//
// Values: <length> | normal
.column-gap(@gap) {
    -webkit-column-gap: @gap;
    -moz-column-gap: @gap;
    column-gap: @gap;
}


// Column rule
// ------------
// In multi-column layouts, the column-rule CSS property specifies a straight line, or "rule", to be drawn between each column.
//
// Values: <column-rule-width> <column-rule-style> <column-rule-color>
.column-rule(@rule){
    -webkit-column-rule: @rule;
    -moz-column-rule: @rule;
    column-rule: @rule;
}


// Content Columns
// ---------------
.content-columns(@column-count; @column-gap) {
  .column-count(@column-count);
  .column-gap(@column-gap);
}
// filter
// ==========
// Generates cross-browser-compatible `filter` for a given element
//
// Link: caniuse http://caniuse.com/filter
// Link: mdn https://developer.mozilla.org/en-US/docs/Web/CSS/filter
// 
// Examples: 
// .filter(grayscale(100%));
// -----------------------------------------------


// filter
// ----------
// Values: blur | brightness | contrast | drop-shadow | grayscale | hue-rotate | invert | sepia
.filter(@filter: grayscale(100%)) {
	-webkit-filter: @filter;
	-moz-filter: @filter;
	-ms-filter: @filter;
	filter: @filter;
}
// FlexLess
// ========
// https://github.com/codio/Flex.less
// -----------------------------------------------


// Enabeling Flexbox
// -----------------
//
// Property Name: display
// Values: flex | inline-flex
.display(@value: flex) when (@value = flex) {
    display: -moz-box;              // Mozilla Old
    display: -webkit-box;           // Webkit Old
}

.display(@value: flex) when (@value = inline-flex) {
    display: -moz-inline-box;       // Mozilla Old
    display: -webkit-inline-box;    // Webkit Old
}

.display(@value: flex) {
    display: ~"-webkit-@{value}";  // Webkit Standard
    display: ~"-moz-@{value}";     // Mozilla Standard
    display: ~"-ms-@{value}box";   // IE 10 Mid
    display: ~"-ms-@{value}";      // IE 11 Standard
    display: @value;               // Standard
}


// Axis Alignment
// --------------
//
// Property Name: justify-content
// Values: flex-start | flex-end | center | space-between | space-around
.justify-content(@value: flex-start) when (@value = flex-start) {
    -webkit-box-pack: start;          // Webkit Old
       -moz-box-pack: start;          // Mozilla Old
       -ms-flex-pack: start;          // IE 10 Mid
}

.justify-content(@value: flex-start) when (@value = center) {
    -webkit-box-pack: center;         // Webkit Old
       -moz-box-pack: center;         // Mozilla Old
       -ms-flex-pack: center;         // IE 10 Mid

}

.justify-content(@value: flex-start) when (@value = flex-end) {
    -webkit-box-pack: end;            // Webkit Old
       -moz-box-pack: end;            // Mozilla Old
       -ms-flex-pack: end;            // IE 10 Mid
}

.justify-content(@value: flex-start) when (@value = space-between) {
    -webkit-box-pack: justify;        // Webkit Old
       -moz-box-pack: justify;        // Mozilla Old
       -ms-flex-pack: justify;        // IE 10 Mid
}

.justify-content(@value: flex-start) when (@value = space-around) {
       -ms-flex-pack: distribute;     // IE 10 Mid
}

.justify-content(@value: flex-start) {
    -webkit-justify-content: @value;  // Webkit Standard
       -moz-justify-content: @value;  // Mozilla Standard
        -ms-justify-content: @value;  // IE 11 Standard
            justify-content: @value;  // Standard
}

// Cross Axis Alignment
// --------------------
//
// Property Name: align-items
// Values: flex-start | flex-end | center | baseline | stretch
.align-items(@value: stretch) when (@value = flex-start) {
    -webkit-box-align: start;          // Webkit Old
       -moz-box-align: start;          // Mozilla Old
       -ms-flex-align: start;          // IE 10 Mid
}

.align-items(@value: stretch) when (@value = center), (@value = baseline), (@value = stretch) {
    -webkit-box-align: @value;         // Webkit Old
       -moz-box-align: @value;         // Mozilla Old
       -ms-flex-align: @value;         // IE 10 Mid

}

.align-items(@value: stretch) when (@value = flex-end) {
    -webkit-box-align: end;            // Webkit Old
       -moz-box-align: end;            // Mozilla Old
       -ms-flex-align: end;            // IE 10 Mid
}

.align-items(@value: stretch) {
    -webkit-align-items: @value;  // Webkit Standard
       -moz-align-items: @value;  // Mozilla Standard
        -ms-align-items: @value;  // IE 11 Standard
            align-items: @value;  // Standard
}



// Individual Cross-Axis Alignment
// -------------------------------
//
// Property Name: align-self
// Values: auto | flex-start | flex-end | center | baseline | stretch
.align-self(@value: auto) when (@value = flex-start) {
       -ms-flex-item-align: start;       // IE 10 Mid
}

.align-self(@value: auto) when (@value = auto), (@value = center), (@value = baseline), (@value = stretch) {
       -ms-flex-item--align: @value;      // IE 10 Mid
}

.align-self(@value: auto) when (@value = flex-end) {
       -ms-flex-item-align: end;         // IE 10 Mid
}

.align-self(@value: auto) {
    -webkit-align-self: @value;          // Webkit Standard
       -moz-align-self: @value;          // Mozilla Standard
        -ms-align-self: @value;          // IE 11 Standard
            align-self: @value;          // Standard
}


// Flex Line Alignment
// -------------------
//
// Property Name: align-content
// Values: flex-start | flex-end | center | space-between | space-around | stretch
.align-content(@value: auto) when (@value = flex-start) {
       -ms-flex-line-pack: start;        // IE 10 Mid
}

.align-content(@value: auto) when (@value = center), (@value = stretch) {
       -ms-flex-line-pack: @value;       // IE 10 Mid
}

.align-content(@value: auto) when (@value = flex-end) {
       -ms-flex-line-pack: end;          // IE 10 Mid
}

.align-content(@value: auto) when (@value = space-between) {
       -ms-flex-line-pack: justify;      // IE 10 Mid
}

.align-content(@value: auto) when (@value = space-around) {
       -ms-flex-line-pack: distribute;   // IE 10 Mid
}

.align-content(@value: auto) {
    -webkit-align-content: @value;       // Webkit Standard
       -moz-align-content: @value;       // Mozilla Standard
        -ms-align-content: @value;       // IE 11 Standard
            align-content: @value;       // Standard
}



// Display Order
// -------------
//
// Property Name: order
// Values: <integer>
.order(@value: 0) {
   -webkit-box-ordinal-group: @value + 1;   // Webkit Old
      -moz-box-ordinal-group: @value + 1;   // Mozilla Old
              -ms-flex-order: @value;       // IE 10 Mid
               -webkit-order: @value;       // Webkit Standard
                  -moz-order: @value;       // Mozilla Standard
                   -ms-order: @value;       // IE 11 Standard
                       order: @value;       // Standard
}


// Flexibillity
// ------------
//
// Property Name: flex
// Values: none | [ <'flex-grow'> <'flex-shrink'>? || <'flex-basis'> ]
.flex (@grow: 1, @shrink: 1, @basis: 0%) {
   -webkit-box-flex: @grow;         // Webkit Old
      -moz-box-flex: @grow;         // Mozilla Old
       -webkit-flex: @arguments;    // Webkit Standard
          -moz-flex: @arguments;    // Mozilla Standard
           -ms-flex: @arguments;    // IE 10 Mid, IE 11 Standard
               flex: @arguments;    // Standard
}


// Longhand - Flex Grow
// --------------------
//
// Property Name: flex-grow
// Value: <number>
.flex-grow(@value: 0) {
    -webkit-flex-grow: @value;      // Webkit Standard
       -moz-flex-grow: @value;      // Mozilla Standard
        -ms-flex-grow: @value;      // IE 10 Mid, IE 11 Standard
            flex-grow: @value;      // Standard
}

// Longhand - Flex Shrink
// --------------------
//
// Property Name: flex-shrink
// Value: <number>
.flex-shrink(@value: 1) {
    -webkit-flex-shrink: @value;      // Webkit Standard
       -moz-flex-shrink: @value;      // Mozilla Standard
        -ms-flex-shrink: @value;      // IE 10 Mid, IE 11 Standard
            flex-shrink: @value;      // Standard
}

// Longhand - Flex Basis
// --------------------
//
// Property Name: flex-basis
// Value: <number>
.flex-basis(@value: auto) {
    -webkit-flex-basis: @value;      // Webkit Standard
       -moz-flex-basis: @value;      // Mozilla Standard
        -ms-flex-basis: @value;      // IE 10 Mid, IE 11 Standard
            flex-basis: @value;      // Standard
}



// Direction
// ---------
//
// Property Name: flex-direction
// Values: row | row-reverse | column | column-reverse
.flex-direction(@value: row) when (@value = row) {
    .box-orient(horizontal);
    .box-direction(normal);
}

.flex-direction(@value: row) when (@value = row-reverse) {
    .box-orient(horizontal);
    .box-direction(reverse);

}

.flex-direction(@value: row) when (@value = column) {
    .box-orient(vertical);
    .box-direction(normal);
}

.flex-direction(@value: row) when (@value = column-reverse) {
    .box-orient(vertical);
    .box-direction(reverse);
}

.flex-direction(@value: row) {
    -webkit-flex-direction: @value;   // Webkit Standard
       -moz-flex-direction: @value;   // Mozilla Standard
        -ms-flex-direction: @value;   // IE 10 Mid, IE 11 Standard
            flex-direction: @value;   // Standard
}



// Old Properties
// --------------
.box-direction(@value) {
    -webkit-box-direction: @value;    // Webkit Old
       -moz-box-direction: @value;    // Mozilla Old
}

.box-orient(@value) {
    -webkit-box-orient: @value;       // Webkit Old
       -moz-box-orient: @value;       // Mozilla Old
}



// Wrapping
// --------
//
// Property Name: flex-wrap
// Values: nowrap | wrap | wrap-reverse
.flex-wrap(@value: nowrap) when (@value = nowrap) {
    -webkit-box-lines: single;      // Webkit Old
       -moz-box-lines: single;      // Mozilla Old
}

.flex-wrap(@value: nowrap) when (@value = wrap) {
    -webkit-box-lines: multiple;    // Webkit Old
       -moz-box-lines: mulitple;    // Mozilla Old
}

.flex-wrap(@value: nowrap) {
    -webkit-flex-wrap: @value;      // Webkit Standard
       -moz-flex-wrap: @value;      // Mozilla Standard
        -ms-flex-wrap: @value;      // IE 10 Mid, IE 11 Standard
            flex-wrap: @value;      // Standard
}


// Shorthand - Flex Flow
// ---------------------
//
// Property Name: flex-flow
// Values: <â€˜flex-directionâ€™> || <â€˜flex-wrapâ€™>
.flex-flow(@direction: row, @wrap: nowrap) {
    -webkit-flex-flow: @arguments;    // Webkit Standard
       -moz-flex-flow: @arguments;    // Mozilla Standard
        -ms-flex-flow: @arguments;    // IE 10 Mid, IE 11 Standard
            flex-flow: @arguments;
}
// inline-block
// ==========
// 
// Examples: 
// .inline-block();
// -----------------------------------------------

// inline-block
// ------------
.inline-block() {
    display: inline-block;
}
.inline-block() when (@support-old-ie) {
    *display: inline;
    *zoom: 1;
}
// keyframes
// ================
// https://github.com/thybzi/keyframes
//
// Examples: 
// .animation(@value) {
//     -webkit-animation: @value;
//     -moz-animation: @value;
//     -o-animation: @value;
//     animation: @value;
// }
// .keyframes-item(fadeIn, 0%) {
//     opacity: 0;
// }
// .keyframes-item(fadeIn, 100%) {
//     opacity: 1;
// }
// Generating keyframes
// .keyframes(fadeIn);
// Applying animation to fade-in block in 1.5 seconds
// .myBlock {
//     .animation(fadeIn 1.5s);
// }
// -----------------------------------------------

    
.keyframes(
    @name,        @point1:  0%, @point2: 100%,
    @point3:  '', @point4:  '', @point5:  '', @point6:  '', @point7:  '', @point8:  '', @point9:  '',
    @point10: '', @point11: '', @point12: '', @point13: '', @point14: '', @point15: '', @point16: ''
) {
    @newline:       ' '; // cannot generate newline with lessphp; but space is better than nothing :)
    @bracketClose:  '}@{newline}';

    // Generates vendor-prefixed keyframes rules
    .vendor-keyframes(@prefix: '', @prehack: @bracketClose) {
        // Some necessary hacks to close a previous bracket (if any) and open a new one
        @beginString:   ~'@{prehack}@@{prefix}keyframes @{name} {@{newline}@{point1}';
        @{beginString} {
            .keyframes-item(@name, @point1);
        }
        .keyframes-point(@name, @point2);
        .keyframes-point(@name, @point3);
        .keyframes-point(@name, @point4);
        .keyframes-point(@name, @point5);
        .keyframes-point(@name, @point6);
        .keyframes-point(@name, @point7);
        .keyframes-point(@name, @point8);
        .keyframes-point(@name, @point9);
        .keyframes-point(@name, @point10);
        .keyframes-point(@name, @point11);
        .keyframes-point(@name, @point12);
        .keyframes-point(@name, @point13);
        .keyframes-point(@name, @point14);
        .keyframes-point(@name, @point15);
        .keyframes-point(@name, @point16);
    }

    // Generates a timepoint rule, ignoring empty points as not passed to .keyframes()
    // Applies styles provided for correspondent .keyframes-item()
    .keyframes-point(@name, @point) when not (@point = '') {
        @pointSelector: ~'@{point}'; // cleaning selector from possible quotes
        @{pointSelector} {
            .keyframes-item(@name, @point); // applying styles provided
        }
    }
    .keyframes-point(@name, @point) when (@point = '') {} // lessphp breaks without this


    // Generating keyframes rules for each vendor prefix
    // The first call MUST pass an empty string ('') as second param
    .vendor-keyframes('-webkit-', '');  // Chrome 3+, Safari 4.0+, Opera 15+ (still needed for versions 31, 7.0 and 17)
    .vendor-keyframes('-moz-');         // Firefox 5 - 15
    .vendor-keyframes('-o-');           // Opera 12.0
    .vendor-keyframes();                // IE 10+, Firefox 16+, Opera 12.1

    // Closing the final bracket (do not touch the magic!)
    @globalEndString: ~'@{bracketClose}x:not(x)';
    @{globalEndString} { content: ''; }
}
// Opacity
// =======
// The opacity CSS property specifies the transparency of an element, that is, the degree to which the background behind the element is overlaid.
//
// Link: caniuse http://caniuse.com/css-opacity
// Link: mdn https://developer.mozilla.org/en-US/docs/Web/CSS/opacity
//
// Examples: 
// .opacity(0.5);
// -----------------------------------------------

// Opacity
// -------
// Values: <number>
.opacity(@opacity) {
  opacity: @opacity;
  @opacity-ie: (@opacity * 100);
  filter: ~"alpha(opacity=@{opacity-ie})";
}
// Placeholder
// ==========
// Placeholder is the short hint displayed in the input field before the user clicked to it. Default placeholder text in inputs has a light gray color (so far).
//
// Link: http://css-tricks.com/snippets/css/style-placeholder-text
//
// Examples: 
// .placeholder(#666666);
// -----------------------------------------------
.placeholder(@color) {
    &::-webkit-input-placeholder {
        color: @color; // Chrome, Safari, Opera
    }
    &:-moz-placeholder {
        color: @color;
    }
    &::-moz-placeholder {
        color: @color; // Firefox 19+
        opacity: 1; // See https://github.com/twbs/bootstrap/pull/11526
    }
    &:-ms-input-placeholder {
        color: @color; // IE 10+
    }
}
// Scrollbar
// ==========
// Placeholder is the short hint displayed in the input field before the user clicked to it. Default placeholder text in inputs has a light gray color (so far).
//
// Link: http://css-tricks.com/custom-scrollbars-in-webkit/
//
// Examples: 
// .scrollbar(rgba(0, 0, 0, 0.2), 10px);
// -----------------------------------------------
.scrollbar (@color: rgba(0, 0, 0, 0.2), @width: 7px, @height: 9px, @radius: 4px) {
  overflow: auto;

  &::-webkit-scrollbar {
    width: @width;
    height: @height;
  }

  &::-webkit-scrollbar-button:start:decrement,
  &::-webkit-scrollbar-button:end:increment {
    display: block;
    height: 0;
    background-color: transparent;
  }

  &::-webkit-scrollbar-track-piece {
    border-radius: 0;
    border-bottom-right-radius: @radius;
    border-bottom-left-radius: @radius;
  }

  &::-webkit-scrollbar-thumb:vertical {
    height: 50px;
    background-color: @color;
    border-radius: @radius;
  }

  &::-webkit-scrollbar-thumb:horizontal {
    width: 50px;
    background-color: @color;
    border-radius: @radius;
  }
}
// Tab Size
// ========
// Generates cross-browser-compatible `tab-size` output
//
// Link: caniuse http://caniuse.com/css3-tabsize
// Link: spec http://dev.w3.org/csswg/css-text/#tab-size1
// Link: http://css-tricks.com/almanac/properties/t/tab-size/
//
// Example: 
// .tab-size(4)
// -----------------------------------------------


// Tab Size
// --------
// The tab-size property in CSS is used to adjust the amount of spaces that display for the tab character.
//
// Values: <number>
.tab-size (@value) {
	-moz-tab-size: @value;
	  -o-tab-size: @value;
	     tab-size: @value;
}
// Transforms
// ==========
// Generates cross-browser-compatible `transform` for a given element
//
// link caniuse http://caniuse.com/transforms2d http://caniuse.com/transforms3d
// link mdn https://developer.mozilla.org/en-US/docs/Web/CSS/transform
//
// Examples:
// .transform(~"scale(1) rotate(360deg) translate(20px, 0px) skew(320deg, 0deg)");
// .transform-origin(~"20% top");
// .backface-visibility(hidden);
// .translate(20px, 10px);
// .translateX(20px);
// .translateY(20px);
// .translate3d(20px, 10px, 30px);
// .scale(0.5, 0.8);
// .scaleX(0.5);
// .scaleY(0.5);
// .skew(35deg, 0deg);
// .skewX(35deg);
// .skewY(35deg);
// .rotate(35deg);
// .rotate3d(35deg, 15deg, 10deg);
// -----------------------------------------------

// Transform
.transform(@transform) {
    -webkit-transform: @transform; 
    -moz-transform: @transform; 
    -ms-transform: @transform; 
    -o-transform: @transform; 
    transform: @transform;
}

// Transform origin
.transform-origin(@origin) {
    -webkit-transform-origin: @origin;
       -moz-transform-origin: @origin;
        -ms-transform-origin: @origin;
         -o-transform-origin: @origin;
            transform-origin: @origin;
}

// Transform style
.transform-style(@style) {
    -webkit-transform-style: @style;
       -moz-transform-style: @style;
        -ms-transform-style: @style;
         -o-transform-style: @style;
            transform-style: @style;
}

// Perspective
.perspective(@perspective) {
    -webkit-perspective: @perspective;
       -moz-perspective: @perspective;
        -ms-perspective: @perspective;
         -o-perspective: @perspective;
            perspective: @perspective;
}

// Perspective origin
.perspective-origin(@origin) {
    -webkit-perspective-origin: @origin;
       -moz-perspective-origin: @origin;
        -ms-perspective-origin: @origin;
         -o-perspective-origin: @origin;
            perspective-origin: @origin;
}

// Backface visibility
// ----------
// Prevent browsers from flickering when using CSS 3D transforms.
//
// Link: MDN https://developer.mozilla.org/en-US/docs/Web/CSS/backface-visibility
//
// Values: visible | hidden
.backface-visibility(@visibility){
  -webkit-backface-visibility: @visibility;
     -moz-backface-visibility: @visibility;
          backface-visibility: @visibility;
}
.backface-visibility(@visibility){
  -webkit-backface-visibility: @visibility;
     -moz-backface-visibility: @visibility;
          backface-visibility: @visibility;
}


// 2D Transforms
// ==========================================================================

// Translate
.translate(@x, @y) {
  @var: translate(@x, @y);
  .transform(@var);
}

// Rotate
.rotate(@degrees) {
  @var: rotate(@degrees);
  .transform(@var);
}

// Scale
.scale(@ratio) {
  @var: scale(@ratio);
  .transform(@var);
}

// Skew
.skew(@x, @y) {
  -webkit-transform: skew(@x, @y);
     -moz-transform: skew(@x, @y);
      -ms-transform: skewX(@x) skewY(@y); 
       -o-transform: skew(@x, @y);
          transform: skew(@x, @y);
  .backface-visibility(hidden)
}

// Matrix
.matrix(@x, @y, @z, @i, @j, @k) {
  @var: matrix(@x, @y, @z, @i, @j, @k);
  .transform(@var);
}

// 3D Transforms
// ==========================================================================

.translate3d(@x, @y, @z) {
  @var: translate3d(@x, @y, @z);
  .transform(@var);
}

.translateX(@x) {
  @var: translateX(@x);
  .transform(@var);
}

.translateY(@y) {
  @var: translateY(@y);
  .transform(@var);
}

.translateZ(@z) {
  @var: translateZ(@z);
  .transform(@var);
}

// Scale3d
.scale3d(@x, @y, @z) {
  @var: scale3d(@x, @y, @z);
  .transform(@var);
}

.scaleX(@x) {
  @var: scaleX(@x);
  .transform(@var);
}

.scaleY(@y) {
  @var: scaleY(@y);
  .transform(@var);
}

.scaleZ(@z) {
  @var: scaleZ(@z);
  .transform(@var);
}

// Rotate3d
.rotate3d(@x, @y, @z) {
  @var: rotate3d(@x, @y, @z);
  .transform(@var);

}

.rotateX(@x) {
  @var: rotateX(@x);
  .transform(@var);
}

.rotateY(@y) {
  @var: rotateY(@y);
  .transform(@var);
}

.rotateZ(@z) {
  @var: rotateZ(@z);
  .transform(@var);
}
// Transitions
// ==========
// Link: caniuse http://caniuse.com/css-transitions
// Link: spec http://www.w3.org/TR/css3-transitions
//
// Examples:
// .transition(background 0.3s ease-in);
// .transition(~"background 0.3s ease-in, box-shadow 0.2s linear");
// .transition-property(all);
// .transition-delay(2s);
// .transition-delay(~"200ms, 2s");
// .transition-duration(~"3s, 2s");
// .transition-timing-function(ease-in-out);
// -----------------------------------------------


// Transition
// ---------
// Shorthand to define a CSS transition, setting all parameters at once.
//
// Values: none | <transition-property> <transition-duration> <transition-timing-function> <transition-delay>
.transition(@transition) {
  -webkit-transition: @transition;
          transition: @transition;
}


// Transition property
// --------------
// The transition-property CSS property is used to specify the names of CSS properties to which a transition effect should be applied.
//
// Values: <propertyname> | all | none
.transition-property(@transition-property) {
  -webkit-transition-property: @transition-property;
          transition-property: @transition-property;
}


// Transition duration
// ------------------
// The transition-duration CSS property specifies the number of seconds or milliseconds a transition animation should take to complete. By default, the value is 0s, meaning that no animation will occur.
//
// Values: <number>
.transition-duration(@transition-duration) {
  -webkit-transition-duration: @transition-duration;
          transition-duration: @transition-duration;
}


// Transition timing function
// -------------------------
// The CSS transition-timing-function property is used to describe how the intermediate values of the CSS properties being affected by a transition effect are calculated. This in essence lets you establish an acceleration curve, so that the speed of the transition can vary over its duration.
//
// Values: linear | ease | ease-in | ease-out | ease-in-out | <cubic-bezier(n,n,n,n)>
.transition-timing-function(@function: ease) {
    -webkit-transition-timing-function: @function;
    transition-timing-function: @function;
}


// Transition delay
// ---------------
// Defines a length of time to elapse before an transition starts, allowing an transition to begin execution some time after it is applied.
//
// Values: <number>
.transition-delay(@transition-delay) {
  -webkit-transition-delay: @transition-delay;
          transition-delay: @transition-delay;
}


// Transform Transition
// --------------------
// @@@@@@@@@@@@@@@@@@@@
.transition-transform(@transition) {
  -webkit-transition: -webkit-transform @transition;
          transition: transform @transition;
}
// User select
// =======
// Disables selection of content of a given element
//
// Link: caniuse http://caniuse.com/user-select-none
// Link: mdn https://developer.mozilla.org/en-US/docs/Web/CSS/user-select
//
// Examples: 
// .user-select(none);
// -----------------------------------------------

// User select
// -------
// Method of preventing text/element selection using CSS. 
//
// Values: none | text | all | element
.user-select(@select) {
  -webkit-user-select: @select;
     -moz-user-select: @select;
      -ms-user-select: @select; // IE10+
          user-select: @select;
}