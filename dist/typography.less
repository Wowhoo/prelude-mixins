//
// .drop-cap(2)
// .drop-cap(32px)
// .drop-cap(2em)
// .drop-cap(200%)
// .drop-cap(2, 3)
// .drop-cap(2, 3, 10px)
//
// .drop-cap-inline(2)
// .drop-cap-inline(32px)
// .drop-cap-inline(2em)
// .drop-cap-inline(200%)
// .drop-cap-inline(32px, 3)
// .drop-cap-inline(2, 3, 10px)
//
// 文字下沉
// .drop-cap用于段落元素首字下沉，.drop-cap-inline用于行内元素整个下沉

.drop-cap-inline(...) when (@support-old-ie) {
    _display: inline;
}
.drop-cap-inline(@context-line-height) {
    @lines: 2;
    @margin-right: (1em / 2);
    .drop-cap-inline(@context-line-height, @lines, @margin-right);
}
.drop-cap-inline(@context-line-height, @lines) {
    @margin-right: (1em / @lines);
    .drop-cap-inline(@context-line-height, @lines, @margin-right);
}
.drop-cap-inline(@context-line-height, @lines, @margin-right) {
    float: left;
    margin-right: @margin-right;
    font-size: unit(@lines) * 1em;
}
// TODO isnumber 函数也可以通过 `1px` 这样的输入
.drop-cap-inline(@context-line-height, @lines, @margin-right) when (isnumber(@context-line-height)) {
    line-height: @context-line-height;
}
.drop-cap-inline(@context-line-height, @lines, @margin-right) when (ispercentage(@context-line-height)), (isem(@context-line-height)) {
    line-height: @context-line-height;
}
.drop-cap-inline(@context-line-height, @lines, @margin-right) when (ispixel(@context-line-height)) {
    line-height: @context-line-height * @lines;
}

.drop-cap(@line-height) {
    @lines: 2;
    @margin-right: (1em / 2);
    .drop-cap(@line-height, @lines, @margin-right);
}
.drop-cap(@line-height, @lines) {
    @margin-right: (1em / @lines);
    .drop-cap(@line-height, @lines, @margin-right);
}
.drop-cap(@line-height, @lines, @margin-right) {
    overflow: hidden;       // 不能使用after和before伪元素清除浮动
    line-height: @line-height;
    &:first-letter {
        .drop-cap-inline(@line-height, @lines, @margin-right);
    }
}
.drop-cap(@line-height, @lines, @margin-right) when (@support-old-ie) {
    _zoom: 1;
}
//
// .ellipsis
// 
// Known issue:
// 指定参数（行数）的功能只支持WebKit。

.ellipsis(...) {
    overflow: hidden;
}
.ellipsis() {
    text-overflow: ellipsis;
    white-space: nowrap;
}
.ellipsis(@line-number) {
    display: -webkit-box;
    -webkit-line-clamp: @line-number;
    -webkit-box-orient: vertical;  
}
/**
 * @description
 * This mixin will enable using the CSS3 value `rem`, which lets you define
 * property-sizes based on the root-element's font-size.
 *
 * @author drublic
 *
 * @link caniuse http://caniuse.com/rem
 * @link spec http://www.w3.org/TR/css3-values/#relative0
 *
 * @param property
 * @param value
 * @param default-font-size {int} optional
 * @returns
 *   <property>: (<value> * <default-font-size>)px;
 *   <property>: <value>;
 *
 * @example
 *   .selector {
 *     .rem(font-size, 1.3);
 *   }
 *
 * Note: Depending on the font-size of the root-element `rem` calculates a
 * property of a current element. The fallback solution excepts a
 * `default-font-size`-argument which is 16px by default.
 */
.rem(@property, @value, @default-font-size: @default-font-size) {
    @length: length(@value);
    @default-value: unit(@default-font-size);

    .inseption(@property, @value) when (@length = 1) {
        @px-value: unit(unit(extract(@value, 1))*@default-value,px);
    .property-inseption(@property, @px-value)
    }
    .inseption(@property, @value) when (@length = 2) {
        @px-value: unit(unit(extract(@value, 1))*@default-value,px) unit(unit(extract(@value, 2))*@default-value,px);
    .property-inseption(@property, @px-value)
    }
    .inseption(@property, @value) when (@length = 3) {
        @px-value: unit(unit(extract(@value, 1))*@default-value,px) unit(unit(extract(@value, 2))*@default-value,px) unit(unit(extract(@value, 3))*@default-value,px);
    .property-inseption(@property, @px-value)
    }
    .inseption(@property, @value) when (@length = 4) {
        @px-value: unit(unit(extract(@value, 1))*@default-value,px) unit(unit(extract(@value, 2))*@default-value,px) unit(unit(extract(@value, 3))*@default-value,px) unit(unit(extract(@value, 4))*@default-value,px);
    .property-inseption(@property, @px-value)
    }

    .property-inseption(@property, @px-value) {
        @output: ~'0; @{property}: @{px-value}; @{property}: @{value}';
        -pl-property: @output;
    }
    .inseption(@property, @value);
}

// @usage: .font-size(16px); // em|px|%
.font-size(@size, @default-font-size: @default-font-size, @context-px-size: @default-font-size) {
    .inception(@size) when (ispixel(@size)) {
        @px-size: unit(@size);
        @default-size: unit(@default-font-size);
        @rem-size: (@px-size / @default-size);
        font-size: ~"@{px-size}px";
        font-size: ~"@{rem-size}rem";
    }
    .inception(@size) when (isem(@size)) {
        @em-size: unit(@size);
        @context-size: unit(@context-px-size);
        @default-size: unit(@default-font-size);
        @rem-size: (@em-size * @context-size / @default-size);
        font-size: ~"@{em-size}em";
        font-size: ~"@{rem-size}rem";
    }
    .inception(@size) when (ispercentage(@size)) {
        font-size: @size;
    }
    .inception(@size);
}

// .font-size-em(14)
// .font-size-em(14, 18)
// .font-size-em(14px)
// .font-size-em(14px, 18px)
//
// 用于辅助计算字体的em和rem值
// https://github.com/clearleft/clearless/blob/master/mixins/typography.less
.font-size-em(@target-px-size, @context-px-size: @default-font-size) {
    font-size: unit(unit(@target-px-size) / unit(@context-px-size), em);
}
// .font-face(ubuntu, ~"../fonts/ubuntu");
// .font-face(entypo, ~"../fonts/entypo", 400, normal, true);
// -----------------------------------------------
.font-face( @family-name, @font-path, @font-weight:normal, @font-style:normal, @include-svg:false ) when not (@include-svg) {
  @font-face {
      font-family: @family-name;
      src: url('@{font-path}.eot');
      src: url('@{font-path}.eot?#iefix') format('embedded-opentype'),
           url('@{font-path}.woff') format('woff'),
           url('@{font-path}.ttf') format('truetype');
      font-weight: @font-weight;
      font-style: @font-style;
  }
}

.font-face( @family-name, @font-path, @font-weight:normal, @font-style:normal, @include-svg:false ) when (@include-svg) {
  @font-face {
      font-family: @family-name;
      src: url('@{font-path}.eot');
      src: url('@{font-path}.eot?#iefix') format('embedded-opentype'),
           url('@{font-path}.woff') format('woff'),
           url('@{font-path}.ttf') format('truetype'),
           url('@{font-path}.svg#@{family-name}') format('svg');
      font-weight: @font-weight;
      font-style: @font-style;
  }
}
// Optional hyphenation
.hyphens(@mode: auto) {
  word-wrap: break-word;
  -webkit-hyphens: @mode;
     -moz-hyphens: @mode;
      -ms-hyphens: @mode; // IE10+
       -o-hyphens: @mode;
          hyphens: @mode;
}


// Wrap words
// force-wrap
.wrap-words() {
  -ms-word-break: break-all;
  word-break: break-all;
  word-break: break-word;
  -webkit-hyphens: auto;
  -moz-hyphens: auto;
  hyphens: auto;
}

.line-height(@size, @default-font-size: @default-font-size, @context-px-size: @default-font-size) {
    .inception(@size) when (ispixel(@size)) {
        @px-size: unit(@size);
        @default-size: unit(@default-font-size);
        @rem-size: (@px-size / @default-size);
        line-height: ~"@{px-size}px";
        line-height: ~"@{rem-size}rem";
    }
    .inception(@size) when (isem(@size)) {
        @em-size: unit(@size);
        @context-size: unit(@context-px-size);
        @default-size: unit(@default-font-size);
        @rem-size: (@em-size * @context-size / @default-size);
        line-height: ~"@{em-size}em";
        line-height: ~"@{rem-size}rem";
    }
    .inception(@size);
}


.line-height-em(@target-px-size, @context-px-size: @default-font-size) {
	line-height: (unit(@target-px-size) / unit(@context-px-size)) * 1em;
}

//      设置margin为 n*基础高度
//      .rhythm-margin();           // 上下margin都为 1*基础高度
//      .rhythm-margin(1);          // 上下margin都为 1*基础高度
//      .rhythm-margin-top();       // 上margin都为 1*基础高度
//      .rhythm-margin-top(2);      // 上margin都为 2*基础高度
//      .rhythm-margin-bottom();    // 下margin都为 1*基础高度
//      .rhythm-margin-bottom(2);   // 下margin都为 2*基础高度
//      设置padding为 n*基础高度
//      .rhythm-padding();          // 上下padding都为 1*基础高度
//      .rhythm-padding(2);         // 上下padding都为 2*基础高度
//      .rhythm-padding-top();      // 上padding都为 1*基础高度
//      .rhythm-padding-top(2);     // 上padding都为 2*基础高度
//      .rhythm-padding-bottom();   // 下padding都为 1*基础高度
//      .rhythm-padding-bottom(2);  // 下padding都为 2*基础高度



.rhythm-margin(@lines: 1) {
    margin-top: (@rhythm-space * @lines);
    margin-bottom: (@rhythm-space * @lines);
}

.rhythm-margin-top(@lines: 1) {
    margin-top: (@rhythm-space * @lines);
}

.rhythm-margin-bottom(@lines: 1) {
    margin-bottom: (@rhythm-space * @lines);
}

.rhythm-padding(@lines: 1) {
    padding-top: (@rhythm-space * @lines);
    padding-bottom: (@rhythm-space * @lines);
}

.rhythm-padding-top(@lines: 1) {
    padding-top: (@rhythm-space * @lines);
}

.rhythm-padding-bottom(@lines: 1) {
    padding-bottom: (@rhythm-space * @lines);
}

    // @usage: .font-smoothing(off); off|antialiased|subpixel-antialiased
    
    .font-smoothing(@var: subpixel-antialiased) {
        .inseption(@var) when not (@var = subpixel-antialiased) {
             -webkit-font-smoothing: @var;
            -moz-osx-font-smoothing: grayscale;
        }
        .inseption(@var) when (@var = subpixel-antialiased) {
             -webkit-font-smoothing: @var;
            -moz-osx-font-smoothing: auto;
        }
        .inseption(@var);
    }
// Image Replacement
// ==========================================================================
.text-hide() {
  font: ~"0/0" a;
  color: transparent;
  text-shadow: none;
  background-color: transparent;
  border: 0;
}





//
// .hide-text
//
// 隐藏文字
// http://jsfiddle.net/necolas/drHaR/2/
// https://github.com/twitter/bootstrap/issues/2362
// https://github.com/h5bp/html5-boilerplate/commit/aa0396eae757c9e03dda4e463fb0d4db5a5f82d7#commitcomment-1052728
// http://www.zeldman.com/2012/03/01/replacing-the-9999px-hack-new-image-replacement/

.hide-text() when not (@support-old-ie) {
    white-space: nowrap;
    text-indent: 100%;
    overflow: hidden;
}
.hide-text() when (@support-old-ie) {
    .ie-hide-text();
}

// ie6, ie7
.ie-hide-text() {
    text-indent: -9999px;
    overflow: hidden;
    text-align: left;
}
