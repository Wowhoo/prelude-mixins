// Transforms
// ==========
// Generates cross-browser-compatible `transform` for a given element
//
// link caniuse http://caniuse.com/transforms2d http://caniuse.com/transforms3d
// link mdn https://developer.mozilla.org/en-US/docs/Web/CSS/transform
//
// Examples:
// .transform(~"scale(1) rotate(360deg) translate(20px, 0px) skew(320deg, 0deg)");
// .transform-origin(~"20% top");
// .backface-visibility(hidden);
// .translate(20px, 10px);
// .translateX(20px);
// .translateY(20px);
// .translate3d(20px, 10px, 30px);
// .scale(0.5, 0.8);
// .scaleX(0.5);
// .scaleY(0.5);
// .skew(35deg, 0deg);
// .skewX(35deg);
// .skewY(35deg);
// .rotate(35deg);
// .rotate3d(35deg, 15deg, 10deg);
// -----------------------------------------------

// Transform
.transform(@transform) {
    -webkit-transform: @transform; 
    -moz-transform: @transform; 
    -ms-transform: @transform; 
    -o-transform: @transform; 
    transform: @transform;
}

// Transform origin
.transform-origin(@origin) {
    -webkit-transform-origin: @origin;
       -moz-transform-origin: @origin;
        -ms-transform-origin: @origin;
         -o-transform-origin: @origin;
            transform-origin: @origin;
}

// Transform style
.transform-style(@style) {
    -webkit-transform-style: @style;
       -moz-transform-style: @style;
        -ms-transform-style: @style;
         -o-transform-style: @style;
            transform-style: @style;
}

// Perspective
.perspective(@perspective) {
    -webkit-perspective: @perspective;
       -moz-perspective: @perspective;
        -ms-perspective: @perspective;
         -o-perspective: @perspective;
            perspective: @perspective;
}

// Perspective origin
.perspective-origin(@origin) {
    -webkit-perspective-origin: @origin;
       -moz-perspective-origin: @origin;
        -ms-perspective-origin: @origin;
         -o-perspective-origin: @origin;
            perspective-origin: @origin;
}

// Backface visibility
// ----------
// Prevent browsers from flickering when using CSS 3D transforms.
//
// Link: MDN https://developer.mozilla.org/en-US/docs/Web/CSS/backface-visibility
//
// Values: visible | hidden
.backface-visibility(@visibility){
  -webkit-backface-visibility: @visibility;
     -moz-backface-visibility: @visibility;
          backface-visibility: @visibility;
}
.backface-visibility(@visibility){
  -webkit-backface-visibility: @visibility;
     -moz-backface-visibility: @visibility;
          backface-visibility: @visibility;
}


// 2D Transforms
// ==========================================================================

// Translate
.translate(@x, @y) {
  @var: translate(@x, @y);
  .transform(@var);
}

// Rotate
.rotate(@degrees) {
  @var: rotate(@degrees);
  .transform(@var);
}

// Scale
.scale(@ratio) {
  @var: scale(@ratio);
  .transform(@var);
}

// Skew
.skew(@x, @y) {
  -webkit-transform: skew(@x, @y);
     -moz-transform: skew(@x, @y);
      -ms-transform: skewX(@x) skewY(@y); 
       -o-transform: skew(@x, @y);
          transform: skew(@x, @y);
  .backface-visibility(hidden)
}

// Matrix
.matrix(@x, @y, @z, @i, @j, @k) {
  @var: matrix(@x, @y, @z, @i, @j, @k);
  .transform(@var);
}

// 3D Transforms
// ==========================================================================

.translate3d(@x, @y, @z) {
  @var: translate3d(@x, @y, @z);
  .transform(@var);
}

.translateX(@x) {
  @var: translateX(@x);
  .transform(@var);
}

.translateY(@y) {
  @var: translateY(@y);
  .transform(@var);
}

.translateZ(@z) {
  @var: translateZ(@z);
  .transform(@var);
}

// Scale3d
.scale3d(@x, @y, @z) {
  @var: scale3d(@x, @y, @z);
  .transform(@var);
}

.scaleX(@x) {
  @var: scaleX(@x);
  .transform(@var);
}

.scaleY(@y) {
  @var: scaleY(@y);
  .transform(@var);
}

.scaleZ(@z) {
  @var: scaleZ(@z);
  .transform(@var);
}

// Rotate3d
.rotate3d(@x, @y, @z) {
  @var: rotate3d(@x, @y, @z);
  .transform(@var);

}

.rotateX(@x) {
  @var: rotateX(@x);
  .transform(@var);
}

.rotateY(@y) {
  @var: rotateY(@y);
  .transform(@var);
}

.rotateZ(@z) {
  @var: rotateZ(@z);
  .transform(@var);
}