// Animations
// ==========
// Generates `animation` for a given element
//
// Link: caniuse http://caniuse.com/css-animation
// Link: spec http://www.w3.org/TR/css3-animations
//
// Examples:
// .animation(my-animation 6s backwards 2s);
// .animation(~"my-animation 6s backwards 2s, my-second-animation 3s linear alternate infinite");
// .animation-delay(2s);
// .animation-delay(~"200ms, 2s");
// .animation-direction(alternate);
// .animation-direction(~"normal, alternate");
// .animation-duration(~"3s, 2s");
// .animation-fill-mode(forwards);
// .animation-timing-function(ease-in-out);
// .animation-iteration-count(3);
// .animation-name(myanimation);
// .animation-play-state(paused);
// -----------------------------------------------


// Animation
// ---------
// Shorthand to define a CSS animation, setting all parameters at once.
//
// Values: none | <animation-name> <animation-duration> <animation-timing-function> <animation-delay> <animation-iteration-count> <animation-direction> <animation-fill-mode> <animation-play-state>
.animation(@animation) {
    -webkit-animation: @animation;
        -ms-animation: @animation;
            animation: @animation;
}

// Animation name
// --------------
// The animation-name CSS property specifies a list of animations that should be applied to the selected element. Each name indicates a @keyframes at-rule that defines the property values for the animation sequence.
//
// Values: <string>
.animation-name(@name) {
    -webkit-animation-name: @name;
    -ms-animation-name: @name;
    animation-name: @name;
}

// Animation duration
// ------------------
// The animation-duration CSS property specifies the length of time that an animation should take to complete one cycle.
//
// Values: <number>
.animation-duration(@duration: 0) {
    -webkit-animation-duration: @duration;
    -ms-animation-duration: @duration;
    animation-duration: @duration;
}


// Animation timing function
// -------------------------
// The animation-timing-function CSS property determines whether an animation is running or paused. You can query this property's value to determine whether or not the animation is currently running; in addition, you can set its value to pause and resume playback of an animation.
//
// Values: linear | ease | ease-in | ease-out | ease-in-out | <cubic-bezier(n,n,n,n)>
.animation-timing-function(@function: ease) {
    -webkit-animation-timing-function: @function;
    -ms-animation-timing-function: @function;
    animation-timing-function: @function;
}


// Animation delay
// ---------------
// Defines a length of time to elapse before an animation starts, allowing an animation to begin execution some time after it is applied.
//
// Values: <number>
.animation-delay(@delay: 0) {
    -webkit-animation-delay: @delay;
    -ms-animation-delay: @delay;
    animation-delay: @delay;
}


// Animation iteration count
// -------------------------
// The animation-iteration-count CSS property specifies how a CSS animation should apply styles to its target before and after it is executing.
//
// Values: <number> | infinite
.animation-iteration-count(@count: 1) {
    -webkit-animation-iteration-count: @count;
    -ms-animation-iteration-count: @count;
    animation-iteration-count: @count;
}


// Animation direction
// -------------------
// The animation-direction CSS property indicates whether the animation should play in reverse on alternate cycles.
//
// Values: normal | reverse | alternate | alternate-reverse
.animation-direction(@direction: normal) {
    -webkit-animation-direction: @direction;
    -ms-animation-direction: @direction;
    animation-direction: @direction;
}


// Animation fill mode
// -------------------
// The animation-fill-mode CSS property specifies how a CSS animation should apply styles to its target before and after it is executing.
//
// Values: none | forwards | backwards | both
.animation-fill-mode(@mode) {
    -webkit-animation-fill-mode: @mode;
    -ms-animation-fill-mode: @mode;
    animation-fill-mode: @mode;
}


// Animation play state
// --------------------
// The animation-play-state CSS property determines whether an animation is running or paused. You can query this property's value to determine whether or not the animation is currently running; in addition, you can set its value to pause and resume playback of an animation.
//
// Values: running | paused
.animation-play-state(@state: running) {
    -webkit-animation-play-state: @state;
    -ms-animation-play-state: @state;
    animation-play-state: @state;
}